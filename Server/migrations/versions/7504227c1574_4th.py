"""4th

Revision ID: 7504227c1574
Revises: 2db1abbefb20
Create Date: 2025-05-05 00:30:14.218790

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '7504227c1574'
down_revision = '2db1abbefb20'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('token_blacklist',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('jti', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('jti')
    )
    op.create_table('announcement',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('date_posted', sa.DateTime(), nullable=True),
    sa.Column('posted_by_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['posted_by_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('audit_log',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('action', sa.String(length=255), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('details', sa.Text(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('document_request',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('student_id', sa.Integer(), nullable=False),
    sa.Column('document_type', sa.String(length=255), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('requested_on', sa.DateTime(), nullable=True),
    sa.Column('processed_on', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['student_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('fee_clearances',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('student_id', sa.Integer(), nullable=False),
    sa.Column('cleared_on', sa.DateTime(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['student_id'], ['student_profiles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('grade',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('student_id', sa.Integer(), nullable=False),
    sa.Column('course_id', sa.Integer(), nullable=False),
    sa.Column('grade', sa.String(length=2), nullable=False),
    sa.Column('semester_id', sa.Integer(), nullable=False),
    sa.Column('date_posted', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], ),
    sa.ForeignKeyConstraint(['semester_id'], ['semesters.id'], ),
    sa.ForeignKeyConstraint(['student_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('audit_logs')
    op.drop_table('grades')
    op.drop_table('document_requests')
    op.drop_table('user_room_bookings')
    op.drop_table('clearance_statuses')
    op.drop_table('user_profiles')
    op.drop_table('announcements')
    with op.batch_alter_table('hostels', schema=None) as batch_op:
        batch_op.alter_column('location',
               existing_type=sa.VARCHAR(length=200),
               type_=sa.String(length=255),
               existing_nullable=False)

    with op.batch_alter_table('payments', schema=None) as batch_op:
        batch_op.add_column(sa.Column('fee_structure_id', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('payment_method', sa.String(length=50), nullable=False))
        batch_op.create_foreign_key(None, 'fee_structures', ['fee_structure_id'], ['id'])

    with op.batch_alter_table('rooms', schema=None) as batch_op:
        batch_op.add_column(sa.Column('room_number', sa.String(length=20), nullable=False))
        batch_op.add_column(sa.Column('bed_count', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('price_per_bed', sa.Float(), nullable=False))
        batch_op.drop_column('capacity')
        batch_op.drop_column('current_occupancy')
        batch_op.drop_column('number')

    with op.batch_alter_table('student_room_bookings', schema=None) as batch_op:
        batch_op.add_column(sa.Column('booked_on', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('start_date', sa.DateTime(), nullable=False))
        batch_op.add_column(sa.Column('end_date', sa.DateTime(), nullable=False))
        batch_op.drop_column('booking_date')

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('password_hash',
               existing_type=sa.VARCHAR(length=128),
               type_=sa.String(length=256),
               existing_nullable=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('password_hash',
               existing_type=sa.String(length=256),
               type_=sa.VARCHAR(length=128),
               existing_nullable=False)

    with op.batch_alter_table('student_room_bookings', schema=None) as batch_op:
        batch_op.add_column(sa.Column('booking_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.drop_column('end_date')
        batch_op.drop_column('start_date')
        batch_op.drop_column('booked_on')

    with op.batch_alter_table('rooms', schema=None) as batch_op:
        batch_op.add_column(sa.Column('number', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('current_occupancy', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('capacity', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.drop_column('price_per_bed')
        batch_op.drop_column('bed_count')
        batch_op.drop_column('room_number')

    with op.batch_alter_table('payments', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_column('payment_method')
        batch_op.drop_column('fee_structure_id')

    with op.batch_alter_table('hostels', schema=None) as batch_op:
        batch_op.alter_column('location',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=200),
               existing_nullable=False)

    op.create_table('announcements',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('date_posted', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('posted_by_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['posted_by_id'], ['users.id'], name='announcements_posted_by_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='announcements_pkey')
    )
    op.create_table('user_profiles',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('user_profiles_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('reg_no', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('program', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('year_of_study', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_profiles_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_profiles_pkey'),
    sa.UniqueConstraint('reg_no', name='user_profiles_reg_no_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('clearance_statuses',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('student_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('date_checked', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['student_id'], ['student_profiles.id'], name='clearance_statuses_student_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='clearance_statuses_pkey')
    )
    op.create_table('user_room_bookings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('room_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('booking_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['room_id'], ['rooms.id'], name='user_room_bookings_room_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['user_profiles.id'], name='user_room_bookings_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_room_bookings_pkey')
    )
    op.create_table('document_requests',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('student_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('document_type', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('requested_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('processed_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['student_id'], ['users.id'], name='document_requests_student_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='document_requests_pkey')
    )
    op.create_table('grades',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('student_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('course_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('grade', sa.VARCHAR(length=2), autoincrement=False, nullable=False),
    sa.Column('semester_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('date_posted', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], name='grades_course_id_fkey'),
    sa.ForeignKeyConstraint(['semester_id'], ['semesters.id'], name='grades_semester_id_fkey'),
    sa.ForeignKeyConstraint(['student_id'], ['users.id'], name='grades_student_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='grades_pkey')
    )
    op.create_table('audit_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('action', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='audit_logs_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='audit_logs_pkey')
    )
    op.drop_table('grade')
    op.drop_table('fee_clearances')
    op.drop_table('document_request')
    op.drop_table('audit_log')
    op.drop_table('announcement')
    op.drop_table('token_blacklist')
    # ### end Alembic commands ###
