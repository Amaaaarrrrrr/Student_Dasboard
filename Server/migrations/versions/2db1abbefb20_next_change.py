"""next change

Revision ID: 2db1abbefb20
Revises: 0f16232efa2e
Create Date: 2025-05-03 00:15:41.205904

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '2db1abbefb20'
down_revision = '0f16232efa2e'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('fee_clearances')
    op.drop_table('audit_logs')
    op.drop_table('document_requests')
    op.drop_table('clearance_status')
    with op.batch_alter_table('hostels', schema=None) as batch_op:
        batch_op.alter_column('location',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=200),
               existing_nullable=False)

    with op.batch_alter_table('payments', schema=None) as batch_op:
        batch_op.drop_constraint('payments_fee_structure_id_fkey', type_='foreignkey')
        batch_op.drop_column('fee_structure_id')
        batch_op.drop_column('payment_method')

    with op.batch_alter_table('rooms', schema=None) as batch_op:
        batch_op.add_column(sa.Column('number', sa.String(length=50), nullable=False))
        batch_op.add_column(sa.Column('capacity', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('current_occupancy', sa.Integer(), nullable=True))
        batch_op.drop_column('price_per_bed')
        batch_op.drop_column('bed_count')
        batch_op.drop_column('room_number')

    with op.batch_alter_table('student_room_bookings', schema=None) as batch_op:
        batch_op.add_column(sa.Column('booking_date', sa.DateTime(), nullable=True))
        batch_op.drop_column('start_date')
        batch_op.drop_column('end_date')
        batch_op.drop_column('booked_on')

    with op.batch_alter_table('unit_registrations', schema=None) as batch_op:
        batch_op.drop_constraint('unit_registrations_student_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'student_profiles', ['student_id'], ['id'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('unit_registrations', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('unit_registrations_student_id_fkey', 'users', ['student_id'], ['id'])

    with op.batch_alter_table('student_room_bookings', schema=None) as batch_op:
        batch_op.add_column(sa.Column('booked_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('end_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('start_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
        batch_op.drop_column('booking_date')

    with op.batch_alter_table('rooms', schema=None) as batch_op:
        batch_op.add_column(sa.Column('room_number', sa.VARCHAR(length=20), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('bed_count', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('price_per_bed', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
        batch_op.drop_column('current_occupancy')
        batch_op.drop_column('capacity')
        batch_op.drop_column('number')

    with op.batch_alter_table('payments', schema=None) as batch_op:
        batch_op.add_column(sa.Column('payment_method', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('fee_structure_id', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.create_foreign_key('payments_fee_structure_id_fkey', 'fee_structures', ['fee_structure_id'], ['id'])

    with op.batch_alter_table('hostels', schema=None) as batch_op:
        batch_op.alter_column('location',
               existing_type=sa.String(length=200),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)

    op.create_table('clearance_status',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('student_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('hostel_clearance', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('fee_clearance', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('library_clearance', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('lab_clearance', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('sports_clearance', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('clearance_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('remarks', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='clearance_status_pkey')
    )
    op.create_table('document_requests',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('student_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('document_type', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('requested_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('processed_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['student_id'], ['users.id'], name='document_requests_student_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='document_requests_pkey')
    )
    op.create_table('audit_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('action', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('details', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='audit_logs_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='audit_logs_pkey')
    )
    op.create_table('fee_clearances',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('student_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('cleared_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['student_id'], ['student_profiles.id'], name='fee_clearances_student_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='fee_clearances_pkey')
    )
    # ### end Alembic commands ###
